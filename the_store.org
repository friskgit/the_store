* Compute Bark scale analysis

Convolve the amplitude spectrum with the critical band filter
to generate an array with _brkBnds_ number of items spaced
according to the Bark scale. Formula for converting from Hz
to Bark by TraunmÃ¼ller. Critical band filter according to
Bladon, A.
#+begin_src c++
void SpectrAnalysis::barkSpect (Signals& s)
{
  int i,j,R=44100;
  float bandSize = (float)R/(s.fft)->size;
  float hz, bark, filterValue, sum;
  for(i=0;i<BARK_BANDS;i++) {
    sum=0.;
    for(j=0;j<(s.fft)->size/2;j++) {
      /* Hz per band of FFT */
	hz = j*bandSize;
      /* Bark value at current FFT bin */
	 bark = 26.81*hz/(1960+hz)-0.53;
      /* Filter function value at current FFT bin transformed to linear amplitude */
	 filterValue = pow(10.,((15.81+7.5*(bark-(i)+.474)-17.5*sqrt(1+pow((bark-(i)+.474),2)))/20.));
      /* Convolution */
	 sum += (filterValue) * (*s.s_spectr);
    }
    s.s_bark[i]=sum;
  }
  return;
}
#+end_src


A process that takes a single frame of a signal and takes its spectrum and transforms it to Bark according to Bladon (1985): Anthony Bladon (1985) Acoustic phonetics, auditory phonetics, speaker sex and speech recognition: a thread, Prentice Hall International (UK) Ltd..
#+begin_src octave :results value :tangle "bark_transform.m"
    				% Length of frame
    s_file = 'bark10_m.wav';
    L = 1024;             
    samples = [10241, 11264];
    [len, fs] = audioread(s_file);
    [x, fs] = audioread(s_file, samples);
    				% sound file length
    sf_length = size(len);
    bin_size = fs/L;
    sf_frames = fix(sf_length / L);
              			% Frequencies in steps of R / fft size
    f = bin_size*(0:(L/2));

    T = 1/fs;             % Sampling period       
    t = (0:L-1)*T;        % Time vector

    				% Window function
    NFFT = 2^nextpow2(L); 
    Y = fft(hanning(L).*x)/L;
            			% Amplitude spectrum in P1
    P2 = abs(Y/L);
    P1 = P2(1:L/2+1);
    P1(2:end-1) = 2*P1(2:end-1);
    				% Calculate filter
    f_bark = arrayfun(@(x) 26.81*x/(1960+x)-0.53, f);
    f_val = 10.^((15.81 + 7.5*(f_bark+0.474) - 17.5*(1 + (f_bark+0.474).^2).^(1/2))/80);
    s_con = f_val' .* P1;

    disp(f_bark(159));
    % Adjust amplitudees
    s_con_sq = sqrt(s_con);
    [mx, imx] = max(s_con_sq);
    				% Plot it
    subplot (2, 1, 1)
    plot(f,P1,"LineWidth",0.5) 
    title("Single-Sided Amplitude Spectrum of X(t)")
    xlabel("f (Hz)")
    ylabel("|amplitude(f)|")

    subplot (2, 1, 2)
    plot(f_bark, s_con_sq,"LineWidth",0.5)
    title("Bark Scale Spectrum of X(t)")
    xlabel("Bark")
    ylabel("|amplitude(bark)|")
  %  xlim([1 24])

#+end_src

To create a file of vectors.
> pkg install -forge signal
> pkg load signal
#+begin_src octave :results value :tangle "bark_loop.m"
  s_file = 'bark10_m.wav';
  L = 1024;
  info = audioinfo(s_file);
  [len, fs] = audioread(s_file);
  sf_length = info.TotalSamples;
  bin_size = fs/L;
  sf_frames = fix(sf_length / L);

  result = [;];

  t = 1:sf_length-1;

  f = bin_size*(0:(L/2));

  T = 1/fs;             % Sampling period       
  t = (0:L-1)*T;        % Time vector
                        % Window function
  NFFT = 2^nextpow2(L); 

  			      % Loop over the frames of the sound file
  for i=1:sf_frames-1
    bin = [];
    start = i*1024;
    stop = start+1023;
    samples = [start, stop];
    [x, fs] = audioread(s_file, samples);

    Y = fft(hanning(L).*x)/L;
                          	% Amplitude spectrum in P1
    P2 = abs(Y/L);
    P1 = P2(1:L/2+1);
    P1(2:end-1) = 2*P1(2:end-1);
                       		% Calculate filter
    f_bark = arrayfun(@(x) 26.81*x/(1960+x)-0.53, f);
    f_val = 10.^((15.81 + 7.5*(f_bark+0.474) - 17.5*(1 + (f_bark+0.474).^2).^(1/2))/80);
            			%    s_con = sqrt(f_val' .* P1);
    s_con = f_val' .* P1;
    s_conq = sqrt(s_con);
    [mx, imx] = max(s_conq);

  				% extract bark bands from the fft
    bark_i=0;
    for j=1:512
  			 % is the current bark band larger than bark_i
      if f_bark(j) > bark_i;
   				%        disp(f_bark(j));
        bin = [bin, s_conq(j)];
        bark_i = bark_i+1;
      endif
    end
    result = [result;bin];
  end
            			% Normalization factor
  norm = 1.0/max(max(result));
            			% Normalize
  result_norm = norm*result;

  test = result_norm(10, :);

  plot(test, "LineWidth",0.5)
  title("Bark Scale Spectrum of X(t) (normalized)")
  xlabel("Bark")
  ylabel("|amplitude(bark)|")
  xlim([1 24])
#+end_src

Print first 100 items to a file
#+begin_src octave :results value :tangle "bark_loop.m"
  file_id = fopen('violin.wav.txt', 'w');
  for j=1:40
    fprintf(file_id, '%f ', result_norm(j,:));
  fdisp(file_id, ' ');
  end
#+end_src

Old loop for printing
#+begin_src octave :results value :tangle "bark_loop_print.m"
  header_a = [newline "Frame " num2str(i) newline];
  header_c = "]"
  del = "----------------------------------"
    
  jb = 0;
  fputs(file_id, header_a);
  fdisp(file_id, del);
  for j=1:512
    if(mod(j, 13) == 0);
  	jb++;
  	fprintf(file_id, '%e ', s_con(j));
    endif
  end
#+end_src

Plot
#+begin_src octave :results value :tangle "bark_loop_plot.m"
      plot(1:24, result_norm(100,:),"LineWidth",0.5);
      title("Bark Scale Spectrum of X(t)")
      xlabel("Bark")
      ylabel("|amplitude(bark)|")
#+end_src


#+begin_src sclang :results none
  ~sin = {SinOsc.ar(10000, 0, 0.5)}.play;
  ~sin.free;

  ~noise = {WhiteNoise.ar(0.9)}.play;

  s.record(duration: 2);

  thisProcess.platform.recordingsDir;

  r = Recorder.new(s);
  r.filePrefix = "10kHz_";
  r.numChannels = 1;
#+end_src

#+begin_src octave :results value :tangle "testing.m"

  				% Calculate filter
  f = 43.06640625 * (0:511);
  				% scale transform
  f_bark = arrayfun(@(x) 26.81*x/(1960+x)-0.53, f);
  	   % calculate the filter for each band of the fft Bark scale 
  f_val = 10.^((15.81 + 7.5*(f_bark+0.474) - 17.5*(1 + (f_bark+0.474).^2).^(1/2)) / 10);
  				% convolution

  s_mel = 2595 * log10(1+(P1/700))

  plot(s_mel(1:512)); 
  title("Transfer function")
  xlabel("Mel")
  ylabel("b(f)|")
  xlim([1 512])

#+end_src

#+begin_src octave :results value :tangle "plotting.m"
  subplot (2, 1, 1)
fplot (@sin, [-10, 10]);
subplot (2, 1, 2)
fplot (@cos, [-10, 10]);
#+end_src


#+begin_src octave :results value :tangle "mel2hz.m"
function ans = mel2hz(f)
  ans = 700*(exp(f/1125) - 1);
  return
 endfunction
#+end_src

#+begin_src octave :results value :tangle "spec.m"
   [x, fs] = audioread('violin.wav');
  step = fix(5*Fs/1000);     # one spectral slice every 5 ms
  window = fix(40*Fs/1000);  # 40 ms data window
  fftn = 2^nextpow2(window); # next highest power of 2
  [S, f, t] = specgram(x, fftn, Fs, window, window-step);
  S = abs(S(2:fftn*4000/Fs,:)); # magnitude in range 0<f<=4000 Hz.
  S = S/max(S(:));           # normalize magnitude so that max is 0 dB.
  S = max(S, 10^(-40/10));   # clip below -40 dB.
  S = min(S, 10^(-3/10));    # clip above -3 dB.
  imagesc (t, f, log(S));    # display in log scale
  set (gca, "ydir", "normal"); # put the 'y' direction in the correct direction
#+end_src

#+begin_src octave :results value :tangle "test.m"
fs=2000;
dt=1/fs;
t=0:dt:1-dt;

sig=5*sin(2*pi*13*t)+8*cos(40*pi*t)+3*sin(2*pi*198*t);

fftsig=fft(sig);
fftsig=abs(fftsig);
fstep=fs/length(fftsig);
f=0:fstep:fs-fstep;

figure
stem(f(1:200), fftsig(1:200), '.')
xlabel('czestotliwosc [Hz]')
ylabel('Modul widma')
title('zoom na fragment modulu widma - pierwsze 250 probek')

figure
subplot(2,1,1)
plot(t,sig)
title("Wykres synalu w dziedzinie czasu")
xlabel("Czas[s]")
ylabel("Wartosc amplitudy")

subplot(2,1,2)
plot(f,fftsig)
title("Wykres sygnalu w dziedzinie czestotliwosci")
xlabel("Czestotliwosc [Hz]")
ylabel("|H(j \\omega)|")

#+end_src
